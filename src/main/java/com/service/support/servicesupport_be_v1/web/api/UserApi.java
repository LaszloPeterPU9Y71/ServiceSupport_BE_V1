/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.service.support.servicesupport_be_v1.web.api;

import com.service.support.servicesupport_be_v1.web.model.ChangePasswordRequest;
import com.service.support.servicesupport_be_v1.web.model.ChangePasswordWithTokenRequest;
import com.service.support.servicesupport_be_v1.web.model.ForgotPassword200Response;
import com.service.support.servicesupport_be_v1.web.model.ForgotPasswordRequest;
import com.service.support.servicesupport_be_v1.web.model.GetAllUsers401Response;
import com.service.support.servicesupport_be_v1.web.model.GetAllUsers403Response;
import com.service.support.servicesupport_be_v1.web.model.GetCurrentUser401Response;
import com.service.support.servicesupport_be_v1.web.model.MeResponse;
import com.service.support.servicesupport_be_v1.web.model.RegisterUserRequest;
import com.service.support.servicesupport_be_v1.web.model.SetPasswordRequest;
import com.service.support.servicesupport_be_v1.web.model.User;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-10-17T20:54:47.397666300+02:00[Europe/Budapest]")
@Validated
@Tag(name = "user", description = "the user API")
public interface UserApi {

    /**
     * POST /users/{id}/roles/{roleName} : Role hozzárendelése felhasználóhoz
     *
     * @param id  (required)
     * @param roleName  (required)
     * @return Sikeres role-hozzárendelés (status code 200)
     */
    @Operation(
        operationId = "assignRole",
        summary = "Role hozzárendelése felhasználóhoz",
        tags = { "user" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Sikeres role-hozzárendelés", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/users/{id}/roles/{roleName}",
        produces = { "application/json" }
    )
    
    ResponseEntity<User> assignRole(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id,
        @Parameter(name = "roleName", description = "", required = true, in = ParameterIn.PATH) @PathVariable("roleName") String roleName
    );


    /**
     * POST /users/{id}/ban : Felhasználó kitiltása
     *
     * @param id  (required)
     * @return Sikeres tiltás (status code 200)
     */
    @Operation(
        operationId = "banUser",
        summary = "Felhasználó kitiltása",
        tags = { "user" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Sikeres tiltás")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/users/{id}/ban"
    )
    
    ResponseEntity<Void> banUser(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    );


    /**
     * PATCH /users/{id}/password : Jelszó megváltoztatása a régi jelszó megadásával
     *
     * @param id  (required)
     * @param changePasswordRequest  (required)
     * @return Sikeres jelszócsere (status code 200)
     *         or Hibás adatok vagy jelszó nem egyezik (status code 400)
     */
    @Operation(
        operationId = "changePassword",
        summary = "Jelszó megváltoztatása a régi jelszó megadásával",
        tags = { "user" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Sikeres jelszócsere"),
            @ApiResponse(responseCode = "400", description = "Hibás adatok vagy jelszó nem egyezik")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/users/{id}/password",
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> changePassword(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id,
        @Parameter(name = "ChangePasswordRequest", description = "", required = true) @Valid @RequestBody ChangePasswordRequest changePasswordRequest
    );


    /**
     * PATCH /users/password-with-token : Jelszó megváltoztatása reset tokennel (email alapján)
     *
     * @param changePasswordWithTokenRequest  (required)
     * @return Sikeres jelszócsere (status code 200)
     *         or Hibás vagy lejárt token (status code 400)
     */
    @Operation(
        operationId = "changePasswordWithToken",
        summary = "Jelszó megváltoztatása reset tokennel (email alapján)",
        tags = { "user" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Sikeres jelszócsere"),
            @ApiResponse(responseCode = "400", description = "Hibás vagy lejárt token")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/users/password-with-token",
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> changePasswordWithToken(
        @Parameter(name = "ChangePasswordWithTokenRequest", description = "", required = true) @Valid @RequestBody ChangePasswordWithTokenRequest changePasswordWithTokenRequest
    );


    /**
     * POST /users/forgot-password : Elfelejtett jelszó – token létrehozása
     *
     * @param forgotPasswordRequest  (required)
     * @return Token generálva vagy meglévő visszaadva (status code 200)
     */
    @Operation(
        operationId = "forgotPassword",
        summary = "Elfelejtett jelszó – token létrehozása",
        tags = { "user" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Token generálva vagy meglévő visszaadva", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ForgotPassword200Response.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/users/forgot-password",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<ForgotPassword200Response> forgotPassword(
        @Parameter(name = "ForgotPasswordRequest", description = "", required = true) @Valid @RequestBody ForgotPasswordRequest forgotPasswordRequest
    );


    /**
     * GET /users : Összes felhasználó lekérdezése
     *
     * @return Sikeres válasz (status code 200)
     *         or Hiányzó vagy hibás token (status code 401)
     *         or Jogosultság hiányzik (status code 403)
     */
    @Operation(
        operationId = "getAllUsers",
        summary = "Összes felhasználó lekérdezése",
        tags = { "user" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Sikeres válasz", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = User.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Hiányzó vagy hibás token", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetAllUsers401Response.class))
            }),
            @ApiResponse(responseCode = "403", description = "Jogosultság hiányzik", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetAllUsers403Response.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/users",
        produces = { "application/json" }
    )
    
    ResponseEntity<List<User>> getAllUsers(
        
    );


    /**
     * GET /me : Visszaadja a bejelentkezett felhasználó adatait és szerepköreit
     *
     * @return A bejelentkezett user adatai (status code 200)
     *         or Nincs bejelentkezve vagy érvénytelen token (status code 401)
     */
    @Operation(
        operationId = "getCurrentUser",
        summary = "Visszaadja a bejelentkezett felhasználó adatait és szerepköreit",
        tags = { "user" },
        responses = {
            @ApiResponse(responseCode = "200", description = "A bejelentkezett user adatai", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MeResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Nincs bejelentkezve vagy érvénytelen token", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetCurrentUser401Response.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/me",
        produces = { "application/json" }
    )
    
    ResponseEntity<MeResponse> getCurrentUser(
        
    );


    /**
     * POST /users/register : Új felhasználó regisztrációja
     *
     * @param registerUserRequest  (required)
     * @return Sikeres regisztráció (status code 200)
     */
    @Operation(
        operationId = "registerUser",
        summary = "Új felhasználó regisztrációja",
        tags = { "user" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Sikeres regisztráció", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/users/register",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<User> registerUser(
        @Parameter(name = "RegisterUserRequest", description = "", required = true) @Valid @RequestBody RegisterUserRequest registerUserRequest
    );


    /**
     * DELETE /users/{id}/roles/{roleName} : Role eltávolítása felhasználótól
     *
     * @param id  (required)
     * @param roleName  (required)
     * @return Sikeres role-eltávolítás (status code 200)
     */
    @Operation(
        operationId = "removeRole",
        summary = "Role eltávolítása felhasználótól",
        tags = { "user" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Sikeres role-eltávolítás", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/users/{id}/roles/{roleName}",
        produces = { "application/json" }
    )
    
    ResponseEntity<User> removeRole(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id,
        @Parameter(name = "roleName", description = "", required = true, in = ParameterIn.PATH) @PathVariable("roleName") String roleName
    );


    /**
     * PATCH /users/{id}/set-password : Admin által jelszó beállítása
     *
     * @param id  (required)
     * @param setPasswordRequest  (required)
     * @return Jelszó frissítve (status code 200)
     */
    @Operation(
        operationId = "setPassword",
        summary = "Admin által jelszó beállítása",
        tags = { "user" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Jelszó frissítve")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/users/{id}/set-password",
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> setPassword(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id,
        @Parameter(name = "SetPasswordRequest", description = "", required = true) @Valid @RequestBody SetPasswordRequest setPasswordRequest
    );


    /**
     * POST /users/{id}/unban : Felhasználó tiltásának feloldása
     *
     * @param id  (required)
     * @return Sikeres feloldás (status code 200)
     */
    @Operation(
        operationId = "unbanUser",
        summary = "Felhasználó tiltásának feloldása",
        tags = { "user" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Sikeres feloldás")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/users/{id}/unban"
    )
    
    ResponseEntity<Void> unbanUser(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    );

}
