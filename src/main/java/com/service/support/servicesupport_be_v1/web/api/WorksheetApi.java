/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.service.support.servicesupport_be_v1.web.api;

import com.service.support.servicesupport_be_v1.web.model.Worksheet;
import com.service.support.servicesupport_be_v1.web.model.WorksheetCreateRequest;
import com.service.support.servicesupport_be_v1.web.model.WorksheetDetail;
import com.service.support.servicesupport_be_v1.web.model.WorksheetListDto;
import com.service.support.servicesupport_be_v1.web.model.WorksheetSaveRequest;
import com.service.support.servicesupport_be_v1.web.model.WorksheetUpdateRequest;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-10-21T20:52:41.212096500+02:00[Europe/Budapest]")
@Validated
@Tag(name = "worksheet", description = "the worksheet API")
public interface WorksheetApi {

    /**
     * POST /worksheets : Új munkalap létrehozása
     *
     * @param worksheetCreateRequest  (required)
     * @return Létrehozott munkalap (status code 201)
     */
    @Operation(
        operationId = "createWorksheet",
        summary = "Új munkalap létrehozása",
        tags = { "worksheet" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Létrehozott munkalap", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Worksheet.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/worksheets",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Worksheet> createWorksheet(
        @Parameter(name = "WorksheetCreateRequest", description = "", required = true) @Valid @RequestBody WorksheetCreateRequest worksheetCreateRequest
    );


    /**
     * DELETE /worksheets/{id} : Munkalap törlése
     *
     * @param id  (required)
     * @return Sikeresen törölve (status code 204)
     *         or Nem található (status code 404)
     */
    @Operation(
        operationId = "deleteWorksheet",
        summary = "Munkalap törlése",
        tags = { "worksheet" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Sikeresen törölve"),
            @ApiResponse(responseCode = "404", description = "Nem található")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/worksheets/{id}"
    )
    
    ResponseEntity<Void> deleteWorksheet(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    );


    /**
     * GET /worksheets : Összes munkalap lekérdezése
     *
     * @return Munkalapok listája (status code 200)
     */
    @Operation(
        operationId = "getAllWorksheets",
        summary = "Összes munkalap lekérdezése",
        tags = { "worksheet" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Munkalapok listája", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Worksheet.class)))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/worksheets",
        produces = { "application/json" }
    )
    
    ResponseEntity<List<Worksheet>> getAllWorksheets(
        
    );


    /**
     * GET /worksheets/{id} : Munkalap lekérése ID alapján
     *
     * @param id  (required)
     * @return A kért munkalap (status code 200)
     *         or Nem található (status code 404)
     */
    @Operation(
        operationId = "getWorksheetById",
        summary = "Munkalap lekérése ID alapján",
        tags = { "worksheet" },
        responses = {
            @ApiResponse(responseCode = "200", description = "A kért munkalap", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Worksheet.class))
            }),
            @ApiResponse(responseCode = "404", description = "Nem található")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/worksheets/{id}",
        produces = { "application/json" }
    )
    
    ResponseEntity<Worksheet> getWorksheetById(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    );


    /**
     * GET /worksheets/{id}/details : Get worksheet with full entity graph
     *
     * @param id  (required)
     * @return Worksheet with full details (status code 200)
     *         or Worksheet not found (status code 404)
     */
    @Operation(
        operationId = "getWorksheetDetails",
        summary = "Get worksheet with full entity graph",
        tags = { "worksheet" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Worksheet with full details", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = WorksheetDetail.class))
            }),
            @ApiResponse(responseCode = "404", description = "Worksheet not found")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/worksheets/{id}/details",
        produces = { "application/json" }
    )
    
    ResponseEntity<WorksheetDetail> getWorksheetDetails(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    );


    /**
     * GET /worksheets/list : Rövidített worksheet lista
     * Csak a legfontosabb mezőket adja vissza a worksheet-ekhez.
     *
     * @return Rövidített worksheet lista (status code 200)
     */
    @Operation(
        operationId = "getWorksheetList",
        summary = "Rövidített worksheet lista",
        description = "Csak a legfontosabb mezőket adja vissza a worksheet-ekhez.",
        tags = { "worksheet" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Rövidített worksheet lista", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = WorksheetListDto.class)))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/worksheets/list",
        produces = { "application/json" }
    )
    
    ResponseEntity<List<WorksheetListDto>> getWorksheetList(
        
    );


    /**
     * PUT /worksheet/{id}/update : Update worksheet
     * Update an existing worksheet with defects, notes, warranty flags, assignee, status, and spare parts.
     *
     * @param id The ID of the worksheet to update (required)
     * @param worksheetUpdateRequest  (required)
     * @return Worksheet updated successfully (status code 200)
     *         or Invalid input (status code 400)
     *         or Unauthorized (status code 401)
     *         or Worksheet not found (status code 404)
     *         or Email küldés sikertelen (MessagingException) (status code 500)
     */
    @Operation(
        operationId = "worksheetIdUpdatePut",
        summary = "Update worksheet",
        description = "Update an existing worksheet with defects, notes, warranty flags, assignee, status, and spare parts.",
        tags = { "worksheet" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Worksheet updated successfully"),
            @ApiResponse(responseCode = "400", description = "Invalid input"),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "404", description = "Worksheet not found"),
            @ApiResponse(responseCode = "500", description = "Email küldés sikertelen (MessagingException)", content = {
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/worksheet/{id}/update",
        produces = { "text/plain" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> worksheetIdUpdatePut(
        @Parameter(name = "id", description = "The ID of the worksheet to update", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id,
        @Parameter(name = "WorksheetUpdateRequest", description = "", required = true) @Valid @RequestBody WorksheetUpdateRequest worksheetUpdateRequest
    );


    /**
     * POST /worksheet : Create worksheet
     * Create a new worksheet with defects, notes, warranty flags, assignee, status, and spare parts.
     *
     * @param worksheetSaveRequest  (required)
     * @return Worksheet created successfully (status code 201)
     *         or Invalid input (status code 400)
     *         or Unauthorized (status code 401)
     */
    @Operation(
        operationId = "worksheetPost",
        summary = "Create worksheet",
        description = "Create a new worksheet with defects, notes, warranty flags, assignee, status, and spare parts.",
        tags = { "worksheet" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Worksheet created successfully"),
            @ApiResponse(responseCode = "400", description = "Invalid input"),
            @ApiResponse(responseCode = "401", description = "Unauthorized")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/worksheet",
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> worksheetPost(
        @Parameter(name = "WorksheetSaveRequest", description = "", required = true) @Valid @RequestBody WorksheetSaveRequest worksheetSaveRequest
    );


    /**
     * POST /worksheet/{worksheetId}/assign/{userId} : Assign a user to a tool
     *
     * @param worksheetId  (required)
     * @param userId  (required)
     * @return Tool assigned (status code 200)
     */
    @Operation(
        operationId = "worksheetWorksheetIdAssignUserIdPost",
        summary = "Assign a user to a tool",
        tags = { "worksheet" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Tool assigned", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Worksheet.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/worksheet/{worksheetId}/assign/{userId}",
        produces = { "application/json" }
    )
    
    ResponseEntity<Worksheet> worksheetWorksheetIdAssignUserIdPost(
        @Parameter(name = "worksheetId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("worksheetId") Integer worksheetId,
        @Parameter(name = "userId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("userId") Integer userId
    );


    /**
     * POST /worksheet/{worksheetId}/unassign : Unassign the user from a tool
     *
     * @param worksheetId  (required)
     * @return Tool unassigned (status code 200)
     */
    @Operation(
        operationId = "worksheetWorksheetIdUnassignPost",
        summary = "Unassign the user from a tool",
        tags = { "worksheet" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Tool unassigned", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Worksheet.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/worksheet/{worksheetId}/unassign",
        produces = { "application/json" }
    )
    
    ResponseEntity<Worksheet> worksheetWorksheetIdUnassignPost(
        @Parameter(name = "worksheetId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("worksheetId") Integer worksheetId
    );

}
