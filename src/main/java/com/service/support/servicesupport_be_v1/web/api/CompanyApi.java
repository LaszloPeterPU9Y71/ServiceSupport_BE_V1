/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.service.support.servicesupport_be_v1.web.api;

import com.service.support.servicesupport_be_v1.web.model.Company;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-10-31T20:50:27.221031900+01:00[Europe/Budapest]")
@Validated
@Tag(name = "company", description = "the company API")
public interface CompanyApi {

    /**
     * POST /companies : Új cég létrehozása
     *
     * @param company  (required)
     * @return A létrehozott cég (status code 200)
     */
    @Operation(
        operationId = "createCompany",
        summary = "Új cég létrehozása",
        tags = { "company" },
        responses = {
            @ApiResponse(responseCode = "200", description = "A létrehozott cég", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Company.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/companies",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Company> createCompany(
        @Parameter(name = "Company", description = "", required = true) @Valid @RequestBody Company company
    );


    /**
     * DELETE /companies/{id} : Cég törlése ID alapján
     *
     * @param id  (required)
     * @return Sikeresen törölve (status code 204)
     *         or Nem található (status code 404)
     */
    @Operation(
        operationId = "deleteCompany",
        summary = "Cég törlése ID alapján",
        tags = { "company" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Sikeresen törölve"),
            @ApiResponse(responseCode = "404", description = "Nem található")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/companies/{id}"
    )
    
    ResponseEntity<Void> deleteCompany(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    );


    /**
     * GET /companies/search/by-name : Cégek keresése név alapján (LIKE %name%)
     *
     * @param name A névrészlet, amire keresünk (required)
     * @return A találatok listája (status code 200)
     */
    @Operation(
        operationId = "findCompaniesByName",
        summary = "Cégek keresése név alapján (LIKE %name%)",
        tags = { "company" },
        responses = {
            @ApiResponse(responseCode = "200", description = "A találatok listája", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Company.class)))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/companies/search/by-name",
        produces = { "application/json" }
    )
    
    ResponseEntity<List<Company>> findCompaniesByName(
        @NotNull @Parameter(name = "name", description = "A névrészlet, amire keresünk", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "name", required = true) String name
    );


    /**
     * GET /companies : Listázza az összes céget
     *
     * @return A cégek listája (status code 200)
     */
    @Operation(
        operationId = "getAllCompanies",
        summary = "Listázza az összes céget",
        tags = { "company" },
        responses = {
            @ApiResponse(responseCode = "200", description = "A cégek listája", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Company.class)))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/companies",
        produces = { "application/json" }
    )
    
    ResponseEntity<List<Company>> getAllCompanies(
        
    );


    /**
     * GET /companies/{id} : Cég lekérése ID alapján
     *
     * @param id  (required)
     * @return A kért cég adatai (status code 200)
     *         or Nem található (status code 404)
     */
    @Operation(
        operationId = "getCompanyById",
        summary = "Cég lekérése ID alapján",
        tags = { "company" },
        responses = {
            @ApiResponse(responseCode = "200", description = "A kért cég adatai", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Company.class))
            }),
            @ApiResponse(responseCode = "404", description = "Nem található")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/companies/{id}",
        produces = { "application/json" }
    )
    
    ResponseEntity<Company> getCompanyById(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    );


    /**
     * PUT /companies/{id} : Cég frissítése ID alapján
     *
     * @param id  (required)
     * @param company  (required)
     * @return A frissített cég (status code 200)
     *         or Nem található (status code 404)
     */
    @Operation(
        operationId = "updateCompany",
        summary = "Cég frissítése ID alapján",
        tags = { "company" },
        responses = {
            @ApiResponse(responseCode = "200", description = "A frissített cég", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Company.class))
            }),
            @ApiResponse(responseCode = "404", description = "Nem található")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/companies/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Company> updateCompany(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "Company", description = "", required = true) @Valid @RequestBody Company company
    );

}
