/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.service.support.servicesupport_be_v1.web.api;

import com.service.support.servicesupport_be_v1.web.model.Defect;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-10-10T00:38:29.316816200+02:00[Europe/Budapest]")
@Validated
@Tag(name = "defect", description = "the defect API")
public interface DefectApi {

    /**
     * GET /defects : Get all defects
     *
     * @return List of defects (status code 200)
     */
    @Operation(
        operationId = "defectsGet",
        summary = "Get all defects",
        tags = { "defect" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of defects", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Defect.class)))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/defects",
        produces = { "application/json" }
    )
    
    ResponseEntity<List<Defect>> defectsGet(
        
    );


    /**
     * DELETE /defects/{id} : Delete defect
     *
     * @param id  (required)
     * @return Deleted (status code 204)
     *         or Not found (status code 404)
     */
    @Operation(
        operationId = "defectsIdDelete",
        summary = "Delete defect",
        tags = { "defect" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Deleted"),
            @ApiResponse(responseCode = "404", description = "Not found")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/defects/{id}"
    )
    
    ResponseEntity<Void> defectsIdDelete(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    );


    /**
     * GET /defects/{id} : Get defect by ID
     *
     * @param id  (required)
     * @return Defect found (status code 200)
     *         or Not found (status code 404)
     */
    @Operation(
        operationId = "defectsIdGet",
        summary = "Get defect by ID",
        tags = { "defect" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Defect found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Defect.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/defects/{id}",
        produces = { "application/json" }
    )
    
    ResponseEntity<Defect> defectsIdGet(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    );


    /**
     * PUT /defects/{id} : Update defect
     *
     * @param id  (required)
     * @param defect  (required)
     * @return Updated (status code 200)
     */
    @Operation(
        operationId = "defectsIdPut",
        summary = "Update defect",
        tags = { "defect" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Updated", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Defect.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/defects/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Defect> defectsIdPut(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id,
        @Parameter(name = "Defect", description = "", required = true) @Valid @RequestBody Defect defect
    );


    /**
     * POST /defects : Create new defect
     *
     * @param defect  (required)
     * @return Created (status code 201)
     */
    @Operation(
        operationId = "defectsPost",
        summary = "Create new defect",
        tags = { "defect" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Created", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Defect.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/defects",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Defect> defectsPost(
        @Parameter(name = "Defect", description = "", required = true) @Valid @RequestBody Defect defect
    );

}
