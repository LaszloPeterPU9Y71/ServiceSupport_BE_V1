/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.service.support.servicesupport_be_v1.web.api;

import com.service.support.servicesupport_be_v1.web.model.Tool;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-10-17T20:54:47.397666300+02:00[Europe/Budapest]")
@Validated
@Tag(name = "tool", description = "the tool API")
public interface ToolApi {

    /**
     * GET /tools : Get all tools
     *
     * @return List of tools (status code 200)
     */
    @Operation(
        operationId = "toolsGet",
        summary = "Get all tools",
        tags = { "tool" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of tools", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Tool.class)))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/tools",
        produces = { "application/json" }
    )
    
    ResponseEntity<List<Tool>> toolsGet(
        
    );


    /**
     * DELETE /tools/{id} : Delete tool
     *
     * @param id  (required)
     * @return Deleted (status code 204)
     *         or Not found (status code 404)
     */
    @Operation(
        operationId = "toolsIdDelete",
        summary = "Delete tool",
        tags = { "tool" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Deleted"),
            @ApiResponse(responseCode = "404", description = "Not found")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/tools/{id}"
    )
    
    ResponseEntity<Void> toolsIdDelete(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    );


    /**
     * GET /tools/{id} : Get tool by ID
     *
     * @param id  (required)
     * @return Tool found (status code 200)
     *         or Not found (status code 404)
     */
    @Operation(
        operationId = "toolsIdGet",
        summary = "Get tool by ID",
        tags = { "tool" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Tool found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Tool.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/tools/{id}",
        produces = { "application/json" }
    )
    
    ResponseEntity<Tool> toolsIdGet(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    );


    /**
     * PUT /tools/{id} : Update tool
     *
     * @param id  (required)
     * @param tool  (required)
     * @return Updated (status code 200)
     */
    @Operation(
        operationId = "toolsIdPut",
        summary = "Update tool",
        tags = { "tool" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Updated", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Tool.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/tools/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Tool> toolsIdPut(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id,
        @Parameter(name = "Tool", description = "", required = true) @Valid @RequestBody Tool tool
    );


    /**
     * POST /tools : Create new tool
     *
     * @param tool  (required)
     * @return Created (status code 201)
     */
    @Operation(
        operationId = "toolsPost",
        summary = "Create new tool",
        tags = { "tool" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Created", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Tool.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/tools",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Tool> toolsPost(
        @Parameter(name = "Tool", description = "", required = true) @Valid @RequestBody Tool tool
    );

}
